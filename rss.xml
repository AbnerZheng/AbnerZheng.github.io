<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Abner Zheng's Blog</title><link>https://abnerzheng.github.io/</link><description>my blog</description><atom:link href="https://abnerzheng.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:abnerzheng@gmail.com"&gt;Abner Zheng&lt;/a&gt; </copyright><lastBuildDate>Sat, 23 Jun 2018 10:03:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>重读GFS</title><link>https://abnerzheng.github.io/posts/zhong-du-gfs/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
前段时间转岗了，放弃了node，转为普通的Java业务工程师，作为一个过渡。但梦想还是要有的。最近得空，赚钱之余还得努力提高自己。故又开始数据库和分布式系统的学习旅程。
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/zhong-du-gfs/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/zhong-du-gfs/</guid><pubDate>Sat, 23 Jun 2018 07:16:08 GMT</pubDate></item><item><title>《多处理器编程的艺术》读书笔记和习题</title><link>https://abnerzheng.github.io/posts/duo-chu-li-qi-bian-cheng-de-yi-zhu-du-shu-bi-ji-he-xi-ti/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
所有你绕过的坑最后还是得亲自跨过去。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/duo-chu-li-qi-bian-cheng-de-yi-zhu-du-shu-bi-ji-he-xi-ti/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/duo-chu-li-qi-bian-cheng-de-yi-zhu-du-shu-bi-ji-he-xi-ti/</guid><pubDate>Sun, 03 Jun 2018 07:45:50 GMT</pubDate></item><item><title>Monads 学习笔记</title><link>https://abnerzheng.github.io/posts/monads-xue-xi-bi-ji/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
原来函数式编程也分为两派， pure和impure。其中Haskell是pure派的代表，而scheme和Standard ML则是impure派的代表。而Monads将impure effects整合到了pure functional languages。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/monads-xue-xi-bi-ji/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/monads-xue-xi-bi-ji/</guid><pubDate>Sun, 20 May 2018 10:00:46 GMT</pubDate></item><item><title>Java 9 Concurrency Cookbook</title><link>https://abnerzheng.github.io/posts/java-9-concurrency-cookbook/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;线程管理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在java中有两种方法创建thread:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;基础Thread类并实现run方法
&lt;/li&gt;
&lt;li&gt;构建一个实现了Runnable接口的类并实现他的方法。然后在创建Thread对象时将该类的实例化对象传为参数。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Thread的属性:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;ID, 即tid
&lt;/li&gt;
&lt;li&gt;Name, 线程名字
&lt;/li&gt;
&lt;li&gt;Priority, 线程中的优先级只是对系统线程的一个建议，并不能保证什么。
&lt;/li&gt;
&lt;li&gt;Status: 线程状态
&lt;ul class="org-ul"&gt;
&lt;li&gt;NEW: 新建还未开始
&lt;/li&gt;
&lt;li&gt;RUNNABLE: 可执行
&lt;/li&gt;
&lt;li&gt;BLOCKED: 被阻塞
&lt;/li&gt;
&lt;li&gt;WAITTING: 等待
&lt;/li&gt;
&lt;li&gt;TIME&lt;sub&gt;WAITING&lt;/sub&gt;: 等待另一个线程固定时间
&lt;/li&gt;
&lt;li&gt;TERMINATED: 终止
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Thread.join方法：可以传入一个时间来获得到期返回。
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/java-9-concurrency-cookbook/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/java-9-concurrency-cookbook/</guid><pubDate>Sun, 22 Apr 2018 11:34:35 GMT</pubDate></item><item><title>Java高性能持久化</title><link>https://abnerzheng.github.io/posts/javagao-xing-neng-chi-jiu-hua/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
一开始以为这本书是讲java的序列化库的，结果是将java的数据库应用。比较老的一本书，浏览一下，做一篇笔记。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/javagao-xing-neng-chi-jiu-hua/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/javagao-xing-neng-chi-jiu-hua/</guid><pubDate>Sun, 22 Apr 2018 11:26:16 GMT</pubDate></item><item><title>分布式系统</title><link>https://abnerzheng.github.io/posts/fen-bu-shi-xi-tong/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
记录一波分布式系统的学习。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/fen-bu-shi-xi-tong/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/fen-bu-shi-xi-tong/</guid><pubDate>Fri, 13 Apr 2018 12:27:59 GMT</pubDate></item><item><title>Scala's types of types(中文翻译)</title><link>https://abnerzheng.github.io/posts/scalas-types-of-types/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Scala's Types of Types&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;在scala中各种不同的Types&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;工作仍在进行&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
尽管我在这篇文章上已经花了有些时间，这里仍有很多事情要做。当你看到某个章节被标了"x"， 这表示它需要被重做或者在某些方面还未完成。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;类型归因&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/scalas-types-of-types/</guid><pubDate>Wed, 14 Mar 2018 07:41:39 GMT</pubDate></item><item><title>Reactive Programming Learning Note</title><link>https://abnerzheng.github.io/posts/reactive-programming-learning-note/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
学习一波马丁的Reactive Programming for Scala. Actor这种并发范式还是得学习一波的。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/reactive-programming-learning-note/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/reactive-programming-learning-note/</guid><pubDate>Thu, 08 Feb 2018 07:44:22 GMT</pubDate></item><item><title>scala学习笔记</title><link>https://abnerzheng.github.io/posts/scalaxue-xi-bi-ji/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/scalaxue-xi-bi-ji/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;</description><category>mathjax</category><guid>https://abnerzheng.github.io/posts/scalaxue-xi-bi-ji/</guid><pubDate>Wed, 07 Feb 2018 06:38:37 GMT</pubDate></item><item><title>B-tree 锁技术研究(翻译)</title><link>https://abnerzheng.github.io/posts/b-tree-suo-ji-zhu-yan-jiu/</link><dc:creator>Abner Zheng</dc:creator><description>&lt;div&gt;&lt;p&gt;
这是CMU高级数据库推荐的一篇论文，详细讲诉了B树锁技术的各种变体的区别和实现。是一篇不可多得的论文。 需要细读，所以干脆就把关键的地方翻译。原论文题目为《A Survey of B-Tree Locking Techniques》。
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abnerzheng.github.io/posts/b-tree-suo-ji-zhu-yan-jiu/"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://abnerzheng.github.io/posts/b-tree-suo-ji-zhu-yan-jiu/</guid><pubDate>Mon, 25 Dec 2017 06:47:45 GMT</pubDate></item></channel></rss>